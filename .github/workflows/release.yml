name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.10'

      - name: Install Julia packages
        run: |
          julia -e 'using Pkg; Pkg.add("PkgTemplates")'

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Run tests
        run: |
          uv run pytest -v

      - name: Run type check
        run: |
          uv run pyright src/juliapkgtemplates/

  release:
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch')
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Check for RC tags and determine release strategy
        id: release_strategy
        run: |
          # Fetch all tags and dev branch
          git fetch --tags
          git fetch origin dev
          
          # Find latest RC tag
          LATEST_RC=$(git tag -l "*-rc.*" --sort=-version:refname | head -1 || echo "")
          
          if [ -n "$LATEST_RC" ]; then
            echo "Found RC tag: $LATEST_RC"
            
            # Extract base version from RC tag (v0.1.0-rc.2 â†’ v0.1.0)
            STABLE_VERSION=$(echo "$LATEST_RC" | sed 's/-rc\.[0-9]*$//')
            
            # Check if stable version already exists
            if git tag | grep -q "^${STABLE_VERSION}$"; then
              echo "Stable version $STABLE_VERSION already exists, falling back to semantic-release"
              echo "strategy=semantic-release" >> $GITHUB_OUTPUT
            else
              echo "Will promote RC $LATEST_RC to stable $STABLE_VERSION"
              echo "strategy=promote-rc" >> $GITHUB_OUTPUT
              echo "rc_tag=$LATEST_RC" >> $GITHUB_OUTPUT
              echo "stable_version=$STABLE_VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "No RC tags found, using semantic-release"
            echo "strategy=semantic-release" >> $GITHUB_OUTPUT
          fi

      - name: Promote RC to stable release
        if: steps.release_strategy.outputs.strategy == 'promote-rc'
        run: |
          STABLE_VERSION="${{ steps.release_strategy.outputs.stable_version }}"
          RC_TAG="${{ steps.release_strategy.outputs.rc_tag }}"
          
          echo "Promoting $RC_TAG to $STABLE_VERSION"
          
          # Create stable tag
          git tag "$STABLE_VERSION"
          git push origin "$STABLE_VERSION"
          
          # Update version in pyproject.toml
          CLEAN_VERSION=$(echo "$STABLE_VERSION" | sed 's/^v//')
          sed -i "s/version = \".*\"/version = \"$CLEAN_VERSION\"/" pyproject.toml
          
          # Commit version update
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "chore: bump version to $CLEAN_VERSION"
          git push origin main
          
          # Create release
          gh release create "$STABLE_VERSION" \
            --title "Release $STABLE_VERSION" \
            --notes "Promoted from $RC_TAG" \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback semantic release (for hotfixes)
        if: steps.release_strategy.outputs.strategy == 'semantic-release'
        run: |
          echo "Running semantic-release for hotfix/patch release"
          uv run semantic-release version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # PyPI publishing is disabled in pyproject.toml (upload_to_pypi = false)
      # Uncomment the following steps if you want to publish to PyPI:
      #
      # - name: Check if release was created
      #   id: check_release
      #   run: |
      #     if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
      #       echo "released=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "released=false" >> $GITHUB_OUTPUT
      #     fi
      #
      # - name: Publish package distributions to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   if: steps.check_release.outputs.released == 'true'

