name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.10'

      - name: Install Julia packages
        run: |
          julia -e 'using Pkg; Pkg.add("PkgTemplates")'

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Run tests
        run: |
          uv run pytest -v

      - name: Run type check
        run: |
          uv run pyright src/juliapkgtemplates/

  release:
    needs: test
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Sync tags from dev and create release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch all tags from dev branch
          git fetch origin dev --tags
          
          # Find the latest tag that was created from dev branch
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No version tags found, skipping release"
            exit 0
          fi
          
          echo "Latest tag found: $LATEST_TAG"
          
          # Update pyproject.toml version on main branch
          CLEAN_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
          CURRENT_VERSION=$(grep 'version = ' pyproject.toml | sed 's/.*version = "\(.*\)".*/\1/')
          
          if [ "$CURRENT_VERSION" = "$CLEAN_VERSION" ]; then
            echo "Version already up to date ($CLEAN_VERSION), skipping version bump"
          else
            echo "Updating version from $CURRENT_VERSION to $CLEAN_VERSION"
            sed -i "s/version = \".*\"/version = \"$CLEAN_VERSION\"/" pyproject.toml
            
            # Re-sync to update uv.lock if needed
            uv sync --group dev
            
            # Commit both pyproject.toml and uv.lock
            git add pyproject.toml uv.lock
            git commit -m "chore: bump version to $CLEAN_VERSION [skip ci]"
            git push origin main
          fi
          
          # Create GitHub release
          uv run semantic-release version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"  
          GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"

      # PyPI publishing is disabled in pyproject.toml (upload_to_pypi = false)
      # Uncomment the following steps if you want to publish to PyPI:
      #
      # - name: Check if release was created
      #   id: check_release
      #   run: |
      #     if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
      #       echo "released=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "released=false" >> $GITHUB_OUTPUT
      #     fi
      #
      # - name: Publish package distributions to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   if: steps.check_release.outputs.released == 'true'

