name: Prepare Release PR

on:
  pull_request:
    types: [opened, ready_for_review, synchronize]
    branches:
      - main
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to prepare for'
        required: true
        type: string

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Run tests
        run: |
          uv run pytest -v

      - name: Get next version
        id: get_version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get the base branch and source branch for proper version calculation
          BASE_BRANCH="${{ github.base_ref }}"
          SOURCE_BRANCH="${{ github.head_ref }}"
          
          echo "::notice::Analyzing commits from $BASE_BRANCH to $SOURCE_BRANCH"
          
          # Fetch base branch for comparison
          git fetch origin $BASE_BRANCH:$BASE_BRANCH
          
          # Get the current version from the main branch
          CURRENT_VERSION=$(git show origin/$BASE_BRANCH:pyproject.toml | grep '^version = ' | cut -d'"' -f2)
          echo "::notice::Current version on $BASE_BRANCH: $CURRENT_VERSION"
          
          # Create temporary merge commit to simulate the merge for semantic-release analysis
          git checkout -b temp-merge-$GITHUB_RUN_ID
          git merge origin/$BASE_BRANCH --no-edit
          
          # Use semantic-release to get next version without creating tags
          NEXT_VERSION=$(uv run semantic-release version --print 2>/dev/null || echo "")
          
          # Clean up temporary branch
          git checkout $SOURCE_BRANCH
          git branch -D temp-merge-$GITHUB_RUN_ID
          
          if [ -n "$NEXT_VERSION" ] && [ "$NEXT_VERSION" != "$CURRENT_VERSION" ]; then
            echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
            echo "has_version=true" >> $GITHUB_OUTPUT
            echo "::notice::Next version will be: $NEXT_VERSION"
          else
            echo "has_version=false" >> $GITHUB_OUTPUT
            echo "::notice::No version change detected (current: $CURRENT_VERSION, calculated: $NEXT_VERSION)"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR title
        if: steps.get_version.outputs.has_version == 'true' && contains(github.event.pull_request.title, 'release')
        run: |
          PR_NUMBER=${{ github.event.pull_request.number || github.event.inputs.pr_number }}
          NEW_TITLE="release: v${{ steps.get_version.outputs.next_version }}"
          
          gh pr edit $PR_NUMBER --title "$NEW_TITLE"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create version tag on source branch
        if: steps.get_version.outputs.has_version == 'true'
        run: |
          NEXT_VERSION=${{ steps.get_version.outputs.next_version }}
          SOURCE_BRANCH=${{ github.head_ref }}
          
          # Create and push tag on source branch
          git tag "v$NEXT_VERSION"
          git push origin "v$NEXT_VERSION"
          
          echo "Created tag v$NEXT_VERSION on $SOURCE_BRANCH branch"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: steps.get_version.outputs.has_version == 'true'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number || github.event.inputs.pr_number }}
          NEXT_VERSION=${{ steps.get_version.outputs.next_version }}
          
          gh pr comment $PR_NUMBER --body "üîç Next release version will be: **v$NEXT_VERSION**

          Tag \`v$NEXT_VERSION\` has been created on ${{ github.head_ref }} branch and will be synced to main after merge."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}